src/components

Footer.js

import React from 'react';
import '../styles/Footer.css';

const Footer = () => {
    return (
        <footer className="footer">
            <p>Â© 2024 Hall Booking System. All rights reserved.</p>
        </footer>
    );
};

export default Footer;


Navbar.js

import React from 'react';
import { Link } from 'react-router-dom';
import '../styles/Navbar.css';

const Navbar = () => {
    return (
        <nav className="navbar">
            <div className="navbar-container">
                <div className="navbar-logo">
                    <Link to="/">Dreamy Day</Link>
                </div>
                <ul className="navbar-links">
                    <li><Link to="/browse-halls">Browse Halls</Link></li>
                    <li><Link to="/signin">Sign In</Link></li>
                    <li><Link to="/signup">Sign Up</Link></li>
                    <li><Link to="/admin">Admin</Link></li>
                </ul>
            </div>
        </nav>
    );
};

export default Navbar;


SearchBar.js

import React from 'react';
import '../styles/SearchBar.css';

const SearchBar = ({ onSearch }) => {
    const handleSearch = (e) => {
        e.preventDefault();
        const query = e.target.elements.search.value;
        onSearch(query);
    };

    return (
        <form className="search-bar" onSubmit={handleSearch}>
            <input type="text" name="search" placeholder="Search for a venue..." />
            <button type="submit">Search</button>
        </form>
    );
};

export default SearchBar;


src/pages

AdminDashboard.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link, useNavigate } from 'react-router-dom';
import '../styles/AdminDashboard.css';

const AdminDashboard = () => {
    const [halls, setHalls] = useState([]);
    const [editingHall, setEditingHall] = useState(null);
    const [newHall, setNewHall] = useState({ name: '', picture: '', location: '', price: '', pax: '', type: '' });
    const [activeTab, setActiveTab] = useState('add');
    const [adminCredentials, setAdminCredentials] = useState({ username: '', password: '' });
    const navigate = useNavigate();

    useEffect(() => {
        fetchHalls();
        fetchAdminCredentials();
    }, []);

    const fetchHalls = async () => {
        try {
            const response = await axios.get('http://localhost:8000/api/halls/'); // Ensure URL is correct
            setHalls(response.data);
        } catch (error) {
            console.error("Error fetching halls:", error.response ? error.response.data : error.message);
        }
    };

    const fetchAdminCredentials = async () => {
        try {
            const response = await axios.get('http://localhost:8000/api/admin'); // Ensure URL is correct
            setAdminCredentials(response.data);
        } catch (error) {
            console.error("Error fetching admin credentials:", error.response ? error.response.data : error.message);
        }
    };

    const handleAdd = async (e) => {
        e.preventDefault();
        console.log("Adding hall with data:", newHall); // Log the data being sent
        try {
            const response = await axios.post('http://localhost:8000/api/halls/', newHall);
            if (response.status === 201) {
                setNewHall({ name: '', picture: '', location: '', price: '', pax: '', type: '' }); // Reset form
                fetchHalls(); // Refresh the hall list
            } else {
                console.error("Error response:", response.data);
            }
        } catch (error) {
            console.error("Error adding hall:", error.response ? error.response.data : error.message);
        }
    };

    const handleUpdate = async (e) => {
        e.preventDefault();
        try {
            await axios.put(`http://localhost:8000/api/halls/${editingHall.id}/`, editingHall);
            setEditingHall(null);
            fetchHalls();
        } catch (error) {
            console.error("Error updating hall:", error.response ? error.response.data : error.message);
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this hall?")) {
            try {
                await axios.delete(`http://localhost:8000/api/halls/${id}/`);
                fetchHalls();
            } catch (error) {
                console.error("Error deleting hall:", error.response ? error.response.data : error.message);
            }
        }
    };

    const handleAdminUpdate = async (e) => {
        e.preventDefault();
    
        try {
            // Since there's likely only one admin record, we'll update the first one.
            const adminId = 1; // Replace with actual admin ID logic if needed
            await axios.put(`http://localhost:8000/api/admin/${adminId}/`, adminCredentials);
            alert('Admin credentials updated successfully.');
        } catch (error) {
            console.error("Error updating admin credentials:", error.response ? error.response.data : error.message);
            alert('An error occurred while updating credentials.');
        }
    };
    

    return (
        <div className="admin-dashboard">
            <h1>Admin Dashboard</h1>
            <nav className="navbar">
                <Link to="#" onClick={() => setActiveTab('add')} className={activeTab === 'add' ? 'active' : ''}>
                    Add Hall
                </Link>
                <Link to="#" onClick={() => setActiveTab('manage')} className={activeTab === 'manage' ? 'active' : ''}>
                    Manage Halls
                </Link>
                <Link to="#" onClick={() => setActiveTab('settings')} className={activeTab === 'settings' ? 'active' : ''}>
                    Settings
                </Link>
            </nav>

            <div className="admin-content">
                {activeTab === 'add' && (
                    <div className="hall-form">
                        <h2>Add New Hall</h2>
                        <form onSubmit={handleAdd}>
                            <label>
                                Name:
                                <input
                                    type="text"
                                    value={newHall.name}
                                    onChange={(e) => setNewHall({ ...newHall, name: e.target.value })}
                                    required
                                />
                            </label>
                            <label>
                                Picture URL:
                                <input
                                    type="text"
                                    value={newHall.picture}
                                    onChange={(e) => setNewHall({ ...newHall, picture: e.target.value })}
                                    required
                                />
                            </label>
                            <label>
                                Location:
                                <input
                                    type="text"
                                    value={newHall.location}
                                    onChange={(e) => setNewHall({ ...newHall, location: e.target.value })}
                                    required
                                />
                            </label>
                            <label>
                                Price:
                                <input
                                    type="number"
                                    value={newHall.price}
                                    onChange={(e) => setNewHall({ ...newHall, price: e.target.value })}
                                    required
                                />
                            </label>
                            <label>
                                Pax:
                                <input
                                    type="number"
                                    value={newHall.pax}
                                    onChange={(e) => setNewHall({ ...newHall, pax: e.target.value })}
                                    required
                                />
                            </label>
                            <label>
                                Type:
                                <input
                                    type="text"
                                    value={newHall.type}
                                    onChange={(e) => setNewHall({ ...newHall, type: e.target.value })}
                                    required
                                />
                            </label>
                            <button type="submit">Add Hall</button>
                        </form>
                    </div>
                )}

                {activeTab === 'manage' && (
                    <div className="hall-list">
                        <h2>Manage Halls</h2>
                        <ul>
                            {halls.map(hall => (
                                <li key={hall.id}>
                                    <h3>{hall.name}</h3>
                                    <p>Location: {hall.location}</p>
                                    <p>Price: {hall.price}</p>
                                    <p>Pax: {hall.pax}</p>
                                    <p>Type: {hall.type}</p>
                                    <button className="edit" onClick={() => setEditingHall(hall)}>Edit</button>
                                    <button onClick={() => handleDelete(hall.id)}>Delete</button>
                                </li>
                            ))}
                        </ul>

                        {editingHall && (
                            <div className="hall-form">
                                <h2>Edit Hall</h2>
                                <form onSubmit={handleUpdate}>
                                    <label>
                                        Name:
                                        <input
                                            type="text"
                                            value={editingHall.name}
                                            onChange={(e) => setEditingHall({ ...editingHall, name: e.target.value })}
                                            required
                                        />
                                    </label>
                                    <label>
                                        Picture URL:
                                        <input
                                            type="text"
                                            value={editingHall.picture}
                                            onChange={(e) => setEditingHall({ ...editingHall, picture: e.target.value })}
                                            required
                                        />
                                    </label>
                                    <label>
                                        Location:
                                        <input
                                            type="text"
                                            value={editingHall.location}
                                            onChange={(e) => setEditingHall({ ...editingHall, location: e.target.value })}
                                            required
                                        />
                                    </label>
                                    <label>
                                        Price:
                                        <input
                                            type="number"
                                            value={editingHall.price}
                                            onChange={(e) => setEditingHall({ ...editingHall, price: e.target.value })}
                                            required
                                        />
                                    </label>
                                    <label>
                                        Pax:
                                        <input
                                            type="number"
                                            value={editingHall.pax}
                                            onChange={(e) => setEditingHall({ ...editingHall, pax: e.target.value })}
                                            required
                                        />
                                    </label>
                                    <label>
                                        Type:
                                        <input
                                            type="text"
                                            value={editingHall.type}
                                            onChange={(e) => setEditingHall({ ...editingHall, type: e.target.value })}
                                            required
                                        />
                                    </label>
                                    <button type="submit">Update Hall</button>
                                </form>
                            </div>
                        )}
                    </div>
                )}

                {activeTab === 'settings' && (
                    <div className="hall-form">
                        <h2>Change Admin Credentials</h2>
                        <form onSubmit={handleAdminUpdate}>
                            <label>
                                New Username:
                                <input
                                    type="text"
                                    value={adminCredentials.username}
                                    onChange={(e) => setAdminCredentials({ ...adminCredentials, username: e.target.value })}
                                    required
                                />
                            </label>
                            <label>
                                New Password:
                                <input
                                    type="password"
                                    value={adminCredentials.password}
                                    onChange={(e) => setAdminCredentials({ ...adminCredentials, password: e.target.value })}
                                    required
                                />
                            </label>
                            <button type="submit">Update Credentials</button>
                        </form>
                    </div>
                )}
            </div>
        </div>
    );
};

export default AdminDashboard;


AdminLogin.js

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../styles/AdminLogin.css';

const AdminLogin = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();

    const handleLogin = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.get('http://localhost:3001/admin');
            const { username: storedUsername, password: storedPassword } = response.data;

            if (username === storedUsername && password === storedPassword) {
                navigate('/admin-dashboard');
            } else {
                alert('Invalid credentials');
            }
        } catch (error) {
            console.error("Error fetching admin credentials:", error);
            alert('An error occurred while logging in.');
        }
    };

    return (
        <div className="auth-container">
            <div className="auth-box">
                <h1 className="auth-title">Admin Login</h1>
                <form onSubmit={handleLogin}>
                    <label>
                        Username:
                        <input 
                            type="text" 
                            name="username"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            required
                        />
                    </label>
                    <label>
                        Password:
                        <input 
                            type="password" 
                            name="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </label>
                    <button type="submit">Login</button>
                </form>
            </div>
        </div>
    );
};

export default AdminLogin;


BrowseHalls.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import '../styles/BrowseHalls.css';

const BrowseHalls = () => {
  const [halls, setHalls] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    ac: '',
    location: '',
    priceRange: '',
  });
  const navigate = useNavigate();

  useEffect(() => {
    fetchHalls();
  }, []);

  const fetchHalls = async () => {
    try {
      const response = await axios.get('http://localhost:3001/halls');
      setHalls(response.data);
    } catch (error) {
      console.error("Error fetching halls:", error);
    }
  };

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleFilterChange = (e) => {
    setFilters({ ...filters, [e.target.name]: e.target.value });
  };

  const filterHalls = (hall) => {
    return (
      hall.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
      (filters.ac === '' || hall.ac === filters.ac) &&
      (filters.location === '' || hall.location.toLowerCase().includes(filters.location.toLowerCase())) &&
      (filters.priceRange === '' || hall.price <= parseInt(filters.priceRange))
    );
  };

  const handleBookNow = (hall) => {
    // Redirect to payment page with hallId as a query parameter
    navigate(`/payment?hallId=${hall.id}`);
  };

  return (
    <div className="browse-halls">
      <h2>Browse Halls</h2>
      <div className="filters-container">
        <input
          type="text"
          placeholder="Search for halls..."
          value={searchTerm}
          onChange={handleSearchChange}
        />
        <select name="ac" value={filters.ac} onChange={handleFilterChange}>
          <option value="">Hall Type</option>
          <option value="AC">AC</option>
          <option value="Non-AC">Non-AC</option>
        </select>
        <input
          type="text"
          placeholder="Location"
          name="location"
          value={filters.location}
          onChange={handleFilterChange}
        />
        <select name="priceRange" value={filters.priceRange} onChange={handleFilterChange}>
          <option value="">Price</option>
          <option value="50000">Up to 50000</option>
          <option value="90000">Up to 90000</option>
          <option value="100000">Up to 100000</option>
        </select>
      </div>
      <div className="hall-cards">
        {halls.filter(filterHalls).length > 0 ? (
          halls.filter(filterHalls).map(hall => (
            <div key={hall.id} className="hall-card">
              <img src={hall.picture} alt={hall.name} className="hall-image" />
              <div className="hall-details">
                <h3>{hall.name}</h3>
                <p>Location: {hall.location}</p>
                <p>Price: ${hall.price}</p>
                <p>Pax: {hall.pax}</p>
                <p>Type: {hall.type}</p>
                <button className="book-now-btn" onClick={() => handleBookNow(hall)}>Book Now</button>
              </div>
            </div>
          ))
        ) : (
          <p>No halls available.</p>
        )}
      </div>
    </div>
  );
};

export default BrowseHalls;



ConfirmationPage.js

import React, { useEffect } from 'react';
import { useLocation, Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../styles/ConfirmationPage.css';

const ConfirmationPage = () => {
    const location = useLocation();
    const booking = location.state?.booking || {};
    const navigate = useNavigate();

    useEffect(() => {
        if (Object.keys(booking).length > 0) {
            const bookingData = {
                hall: booking.hallId,
                name: booking.name,
                address: booking.address,
                guests: booking.guests,
                event_date: booking.eventDate,
                payment_method: booking.paymentMethod,
            };
    
            console.log("Sending booking data:", bookingData); // Log the data
    
            axios.post('http://localhost:8000/api/bookings/', bookingData)
                .then(response => {
                    console.log("Booking saved successfully:", response.data);
                })
                .catch(error => {
                    console.error("Error saving booking:", error.response ? error.response.data : error.message);
                    alert('There was an issue saving your booking. Please try again.');
                });
        } else {
            navigate('/browse-halls');
        }
    }, [booking, navigate]);
    

    return (
        <div className="confirmation-page">
            <div className="confirmation-content">
                <h1 className="confirmation-title">Booking Confirmed!</h1>
                <p className="confirmation-message">Thank you for booking with us. Your reservation has been successfully processed.</p>
                <div className="confirmation-details">
                    <h2 className="details-title">Booking Details:</h2>
                    <ul>
                        <li><strong>Event Name:</strong> Dreamy Day Event</li>
                        <li><strong>Event Date:</strong> {booking.eventDate || '[Event Date]'}</li>
                        <li><strong>Location:</strong> {booking.hallName || '[Hall Name]'}</li>
                        <li><strong>Number of Guests:</strong> {booking.guests || '[Number of Guests]'}</li>
                        {/* <li><strong>Total Price:</strong> ${booking.totalPrice || '[Total Price]'}</li> */}
                    </ul>
                </div>
                <div className="confirmation-actions">
                    <Link to="/" className="back-home-btn">Back to Home</Link>
                    <Link to="/browse-halls" className="browse-halls-btn">Browse More Halls</Link>
                </div>
            </div>
        </div>
    );
};

export default ConfirmationPage;


HomePage.js

import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import '../styles/HomePage.css';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';

const FeaturedEventCard = ({ event }) => {
    return (
        <div className="featured-event-card">
            <img src={event.image} alt={event.title} />
            <div className="featured-event-info">
                <h3>{event.title}</h3>
                <p>{event.description}</p>
            </div>
        </div>
    );
};

const HomePage = () => {
    const [searchQuery, setSearchQuery] = useState('');
    const halls = useSelector((state) => state.halls);
    const navigate = useNavigate();

    const handleSearch = (query) => {
        setSearchQuery(query);
    };

    const handleExploreHalls = () => {
        navigate('/browse-halls');
    };

    useEffect(() => {
        // Fetch halls from the backend or mock data
    }, []);

    const filteredHalls = halls.filter(hall => 
        hall.name.toLowerCase().includes(searchQuery.toLowerCase())
    );

    const featuredEvents = [
        {
            id: 1,
            image: 'https://img2.storyblok.com/0x600/f/116532/1920x1080/42e2846e90/cru-champagne-bar-bangkok.webp',
            title: 'A Night Under the Stars',
            description: 'Experience an unforgettable evening beneath a blanket of stars. Our rooftop venues offer the perfect backdrop for an intimate dinner or a grand celebration.'
        },
        {
            id: 2,
            image: 'https://i0.wp.com/2.bp.blogspot.com/-DSJvzIypYxQ/VI9aIe6a0oI/AAAAAAAA5r4/e8Z5h9Sl8XA/s1600/wedding.jpg',
            title: 'Enchanted Garden Weddings',
            description: 'Step into a world of romance with our enchanted garden weddings. Surrounded by lush greenery and blooming flowers, say your vows in a setting straight out of a fairy tale.'
        },
        {
            id: 3,
            image: 'https://staciamikele.com/wp-content/uploads/sites/2/2021/02/1E7747BE-829D-40EC-8EE0-DE4B714CC36E-1080x810.jpeg',
            title: 'Gatsby Glamour',
            description: 'Travel back to the roaring twenties with our Gatsby-themed events. Think flapper dresses, jazz music, and a night filled with opulence and charm.'
        },
        {
            id: 4,
            image: 'https://fabeveryday.com/wp-content/uploads/2020/06/French-Country-Cottage-Inspired-Gatherings-1.jpg',
            title: 'Rustic Chic Gatherings',
            description: 'For those who love the charm of the countryside, our rustic chic gatherings bring together the best of nature and elegance. Think wooden beams, fairy lights, and long farm tables adorned with wildflowers.'
        },
        {
            id: 5,
            image: 'https://cache.marriott.com/content/dam/marriott-renditions/KULAK/kulak-ballroom-9779-hor-wide.jpg?output-quality=70&interpolation=progressive-bilinear&downsize=1920px:*',
            title: 'Majestic Ballroom Nights',
            description: 'Make your event the talk of the town with a majestic ballroom night. With grand chandeliers, marble floors, and a spacious dance floor, our ballrooms are designed for those who dream big.'
        }
    ];

    const settings = {
        dots: true,
        infinite: true,
        speed: 400,
        slidesToShow: 3,
        slidesToScroll: 1,
        autoplay: true, // Enable autoplay
        autoplaySpeed: 3000, // Set autoplay speed in milliseconds (3 seconds)
        responsive: [
            {
                breakpoint: 1024,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 1,
                    infinite: true,
                    dots: true
                }
            },
            {
                breakpoint: 768,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1
                }
            }
        ]
    };
    

    return (
        <div className="homepage">
            <header className="header">
                <div className="overlay"></div>
                <div className="header-content">
                    <h1>Welcome to Dreamy Day</h1>
                    <p>Your perfect venue for every occasion</p>
                    <button onClick={handleExploreHalls} className="explore-halls-button">
                        Explore Halls
                    </button>
                </div>
            </header>

            <section className="highlights">
                <h2>Why Choose Us?</h2>
                <div className="highlight-cards">
                    <div className="highlight-card">
                        {/* <img src="https://images.unsplash.com/photo-1598504528239-76f5cb4d2574?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzNjUyOXwwfDF8c2VhcmNofDkzfHxsaWZlc3R5bGV8ZW58MHx8fDE2NTc2NzMwMjc&ixlib=rb-1.2.1&q=80&w=300" alt="Convenience" /> */}
                        <h3>Convenience</h3>
                        <p>Find and book the best halls with ease.</p>
                    </div>
                    <div className="highlight-card">
                        {/* <img src="https://images.unsplash.com/photo-1546796744-1d0e2f228918?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzNjUyOXwwfDF8c2VhcmNofDkzfHxsaWZlc3R5bGV8ZW58MHx8fDE2NTc2NzMwMjc&ixlib=rb-1.2.1&q=80&w=300" alt="Affordable" /> */}
                        <h3>Affordable</h3>
                        <p>Get the best deals on all venue bookings.</p>
                    </div>
                    <div className="highlight-card">
                        {/* <img src="https://images.unsplash.com/photo-1598504528239-76f5cb4d2574?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzNjUyOXwwfDF8c2VhcmNofDkzfHxsaWZlc3R5bGV8ZW58MHx8fDE2NTc2NzMwMjc&ixlib=rb-1.2.1&q=80&w=300" alt="Quality" /> */}
                        <h3>Quality</h3>
                        <p>Experience top-notch services and amenities.</p>
                    </div>
                </div>
            </section>

            <section className="featured-events">
                <h2>Featured Events</h2>
                <Slider {...settings}>
                    {featuredEvents.map(event => (
                        <FeaturedEventCard key={event.id} event={event} />
                    ))}
                </Slider>
            </section>

            <section className="special-offers">
                <h2>Special Offers</h2>
                <div className="offers-container">
                    <div className="offer-card">
                        <img src="https://img.freepik.com/premium-vector/weekend-sale-banner-with-discount_7547-316.jpg" alt="Offer 1" />
                        <h3>Discount on Weekend Bookings</h3>
                        <p>Enjoy a 20% discount on bookings made for weekends.</p>
                    </div>
                    <div className="offer-card">
                        <img src="https://image-tc.galaxy.tf/wijpeg-1anwwiokata4vzu3qkz56ul0e/early-bird_standard.jpg?crop=45%2C0%2C711%2C533" alt="Offer 2" />
                        <h3>Early Bird Special</h3>
                        <p>Book your hall 3 months in advance and get a 15% discount.</p>
                    </div>
                </div>
            </section>

            <footer className="footer">
                <div className="footer-content">
                    <div className="footer-section about">
                        <h3>About Dreamy Day</h3>
                        <p>Dreamy Day is your go-to platform for booking venues for any occasion. Whether it's a wedding, corporate event, or a private party, we have the perfect space for you.</p>
                    </div>
                    <div className="footer-section contact">
                        <h3>Contact Us</h3>
                        <p>Email: <a href="mailto:support@dreamyday.com">support@dreamyday.com</a></p>
                        <p>Phone: (123) 456-7890</p>
                        <p>Address: 123 Dreamy Lane, Event City, EV 12345</p>
                    </div>
                    <div className="footer-section social">
                        <h3>Follow Us</h3>
                        <a href="https://www.facebook.com/dreamyday" target="_blank" rel="noopener noreferrer">Facebook</a>
                        <a href="https://www.twitter.com/dreamyday" target="_blank" rel="noopener noreferrer">Twitter</a>
                        <a href="https://www.instagram.com/dreamyday" target="_blank" rel="noopener noreferrer">Instagram</a>
                    </div>
                </div>
                {/* <div className="footer-bottom">
                    <p>&copy; {new Date().getFullYear()} Dreamy Day. All rights reserved.</p>
                </div> */}
            </footer>
        </div>
    );
};

export default HomePage;


ManageHalls.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { FaEdit, FaTrash, FaPlus } from 'react-icons/fa';
import '../styles/ManageHalls.css';

const ManageHalls = () => {
    const [halls, setHalls] = useState([]);
    const [editingHall, setEditingHall] = useState(null);
    const [newHall, setNewHall] = useState({ name: '', picture: '', location: '', price: '', pax: '' });
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    useEffect(() => {
        fetchHalls();
    }, []);

    const fetchHalls = async () => {
        setLoading(true);
        try {
            const response = await axios.get('http://localhost:3001/halls');
            setHalls(response.data);
            setLoading(false);
        } catch (error) {
            setError("Error fetching halls.");
            setLoading(false);
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this hall?")) {
            try {
                await axios.delete(`http://localhost:3001/halls/${id}`);
                fetchHalls();
            } catch (error) {
                setError("Error deleting hall.");
            }
        }
    };

    const handleAdd = async (e) => {
        e.preventDefault();
        try {
            await axios.post('http://localhost:3001/halls', newHall);
            setNewHall({ name: '', picture: '', location: '', price: '', pax: '' });
            fetchHalls();
        } catch (error) {
            setError("Error adding hall.");
        }
    };

    const handleUpdate = async (e) => {
        e.preventDefault();
        try {
            await axios.put(`http://localhost:3001/halls/${editingHall.id}`, editingHall);
            setEditingHall(null);
            fetchHalls();
        } catch (error) {
            setError("Error updating hall.");
        }
    };

    return (
        <div className="manage-halls">
            <h1>Manage Halls</h1>
            {error && <p className="error-message">{error}</p>}
            <div className="hall-form">
                <h2>{editingHall ? 'Update Hall' : 'Add New Hall'}</h2>
                <form onSubmit={editingHall ? handleUpdate : handleAdd}>
                    {/* form fields */}
                    <button type="submit" className="submit-btn">
                        {editingHall ? <><FaEdit /> Update Hall</> : <><FaPlus /> Add Hall</>}
                    </button>
                </form>
            </div>
            {loading ? (
                <p>Loading halls...</p>
            ) : (
                <div className="hall-list">
                    <h2>Hall List</h2>
                    <ul>
                        {halls.map(hall => (
                            <li key={hall.id}>
                                {/* hall details */}
                                <div className="hall-actions">
                                    <button className="edit" onClick={() => setEditingHall(hall)}>
                                        <FaEdit /> Edit
                                    </button>
                                    <button className="delete" onClick={() => handleDelete(hall.id)}>
                                        <FaTrash /> Delete
                                    </button>
                                </div>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};

export default ManageHalls;


PaymentPage.js

// src/pages/PaymentPage.js

import React, { useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import '../styles/PaymentPage.css';

const PaymentPage = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const [form, setForm] = useState({
        name: '',
        address: '',
        guests: '',
        eventDate: '',
        paymentMethod: 'Card',
        cardNumber: '',
        cardExpiry: '',
        cardCVC: '',
        upiId: ''
    });
    const [dateError, setDateError] = useState('');

    const queryParams = new URLSearchParams(location.search);
    const hallId = queryParams.get('hallId');

    const handleChange = (e) => {
        const { name, value } = e.target;

        // Validate event date when it changes
        if (name === 'eventDate') {
            if (!validateDate(value)) {
                setDateError('Please choose a valid date.');
            } else {
                setDateError('');
            }
        }

        setForm({
            ...form,
            [name]: value,
        });
    };

    const validateDate = (date) => {
        const selectedDate = new Date(date);
        const currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);
        return selectedDate >= currentDate;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (dateError) {
            return; // Do not proceed if there's a date error
        }

        const booking = {
            hallId,
            name: form.name,
            address: form.address,
            guests: form.guests,
            eventDate: form.eventDate,
            paymentMethod: form.paymentMethod,
            cardNumber: form.cardNumber,
            cardExpiry: form.cardExpiry,
            cardCVC: form.cardCVC,
            upiId: form.upiId,
            bookingDate: new Date().toISOString()
        };

        try {
            const response = await fetch('http://localhost:3001/bookings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(booking)
            });

            if (response.ok) {
                // Pass the booking details to the confirmation page
                navigate('/confirmation', { state: { booking } });
            } else {
                console.error('Error booking hall');
            }
        } catch (error) {
            console.error('Error booking hall:', error);
        }
    };

    return (
        <div className="payment-page">
            <h1>Complete Your Booking</h1>
            <form onSubmit={handleSubmit}>
                <div className="form-group">
                    <label htmlFor="name">Name:</label>
                    <input type="text" id="name" name="name" value={form.name} onChange={handleChange} required />
                </div>
                <div className="form-group">
                    <label htmlFor="address">Address:</label>
                    <input type="text" id="address" name="address" value={form.address} onChange={handleChange} required />
                </div>
                <div className="form-group">
                    <label htmlFor="guests">Number of Guests:</label>
                    <input type="number" id="guests" name="guests" value={form.guests} onChange={handleChange} required />
                </div>
                <div className="form-group">
                    <label htmlFor="eventDate">Event Date:</label>
                    <input type="date" id="eventDate" name="eventDate" value={form.eventDate} onChange={handleChange} required />
                    {dateError && <p className="error">{dateError}</p>}
                </div>
                <div className="form-group">
                    <label htmlFor="paymentMethod">Payment Method:</label>
                    <select id="paymentMethod" name="paymentMethod" value={form.paymentMethod} onChange={handleChange} required>
                        <option value="Card">Card</option>
                        <option value="UPI">UPI</option>
                        <option value="PayPal">PayPal</option>
                        <option value="Alipay">Alipay</option>
                    </select>
                </div>
                {form.paymentMethod === 'Card' && (
                    <>
                        <div className="form-group">
                            <label htmlFor="cardNumber">Card Number:</label>
                            <input type="text" id="cardNumber" name="cardNumber" value={form.cardNumber} onChange={handleChange} required />
                        </div>
                        <div className="form-group">
                            <label htmlFor="cardExpiry">Card Expiry:</label>
                            <input type="text" id="cardExpiry" name="cardExpiry" value={form.cardExpiry} onChange={handleChange} required />
                        </div>
                        <div className="form-group">
                            <label htmlFor="cardCVC">Card CVC:</label>
                            <input type="text" id="cardCVC" name="cardCVC" value={form.cardCVC} onChange={handleChange} required />
                        </div>
                    </>
                )}
                {form.paymentMethod === 'UPI' && (
                    <div className="form-group">
                        <label htmlFor="upiId">UPI ID:</label>
                        <input type="text" id="upiId" name="upiId" value={form.upiId} onChange={handleChange} required />
                    </div>
                )}
                <button type="submit" className="submit-btn">Submit Payment</button>
            </form>
        </div>
    );
};

export default PaymentPage;


Signin.js

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../styles/SignIn.css';

const SignIn = () => {
    const [formData, setFormData] = useState({ email: '', password: '' });
    const [message, setMessage] = useState('');
    const navigate = useNavigate();

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            // Fetch users from db.json and filter by email and password
            const response = await axios.get('http://localhost:3001/users');
            const user = response.data.find(user => 
                user.email === formData.email && user.password === formData.password
            );

            if (user) {
                // If credentials match, navigate to browse halls
                navigate('/browse-halls');
            } else {
                // If credentials don't match, show error message
                setMessage('Invalid email or password');
            }
        } catch (error) {
            console.error("Error during authentication:", error);
            setMessage('Error during authentication');
        }
    };

    return (
        <div className="login-signup-container">
            <div className="login-signup">
                <h1>Login</h1>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label htmlFor="email">Email:</label>
                        <input
                            type="email"
                            id="email"
                            name="email"
                            value={formData.email}
                            onChange={handleChange}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label htmlFor="password">Password:</label>
                        <input
                            type="password"
                            id="password"
                            name="password"
                            value={formData.password}
                            onChange={handleChange}
                            required
                        />
                    </div>
                    <button type="submit" className="submit-btn">Login</button>
                    {message && <p className="message">{message}</p>}
                </form>
                <button onClick={() => navigate('/signup')} className="switch-button">
                    Need an account? Signup
                </button>
            </div>
        </div>
    );
};

export default SignIn;


SignUp.js

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const SignUp = () => {
    const [formData, setFormData] = useState({ email: '', password: '' });
    const [message, setMessage] = useState('');
    const navigate = useNavigate();

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.post('http://localhost:8000/api/users/', formData); // Updated URL
            if (response.status === 201) {
                navigate('/'); // Redirect to home page after successful signup
            } else {
                setMessage('Error signing up');
            }
        } catch (error) {
            console.error("Error during signup:", error);
            setMessage('Error during signup');
        }
    };
    

    return (
        <div className="login-signup-container">
            <div className="login-signup">
                <h1>Signup</h1>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label htmlFor="email">Email:</label>
                        <input
                            type="email"
                            id="email"
                            name="email"
                            value={formData.email}
                            onChange={handleChange}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label htmlFor="password">Password:</label>
                        <input
                            type="password"
                            id="password"
                            name="password"
                            value={formData.password}
                            onChange={handleChange}
                            required
                        />
                    </div>
                    <button type="submit" className="submit-btn">Signup</button>
                    {message && <p className="message">{message}</p>}
                </form>
                <button onClick={() => navigate('/signin')} className="switch-button">
                    Already have an account? Login
                </button>
            </div>
        </div>
    );
};

export default SignUp;


src/redux/actions

hallSlice.js

// src/redux/hallSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

export const fetchHalls = createAsyncThunk('halls/fetchHalls', async () => {
    const response = await axios.get('/api/halls'); // Update with your API endpoint
    return response.data;
});

const hallSlice = createSlice({
    name: 'halls',
    initialState: [],
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchHalls.fulfilled, (state, action) => {
                return action.payload;
            });
    },
});

export default hallSlice.reducer;


src/redux/reducers

hallReducers.js

const initialState = [];

const hallReducer = (state = initialState, action) => {
    switch (action.type) {
        case 'SET_HALLS':
            return action.payload;
        default:
            return state;
    }
};

export default hallReducer;


src/redux

hallSlice.js

// src/redux/hallSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

export const fetchHalls = createAsyncThunk('halls/fetchHalls', async () => {
    const response = await axios.get('/api/halls'); // Update with your API endpoint
    return response.data;
});

const hallSlice = createSlice({
    name: 'halls',
    initialState: [],
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchHalls.fulfilled, (state, action) => {
                return action.payload;
            });
    },
});

export default hallSlice.reducer;


store.js

import { createStore, combineReducers } from 'redux';
import hallReducer from './reducers/hallReducer';

const rootReducer = combineReducers({
    halls: hallReducer
});

const store = createStore(rootReducer);

export default store;



src/styles

AdminDashboard.css

/* General styling for Admin Dashboard */
.admin-dashboard {
    font-family: 'Inter', sans-serif;
}

/* Navbar styling */
.navbar {
    display: flex;
    justify-content: space-around;
    background-color: #1a202c;
    padding: 10px 0;
}

.navbar a {
    color: white;
    text-decoration: none;
    padding: 10px 20px;
    font-size: 18px;
    transition: background-color 0.3s;
}

.navbar a.active {
    background-color: #4a5568;
}

.navbar a:hover {
    background-color: #2d3748;
}

/* Main content area */
.admin-content {
    padding: 20px;
}

/* Form styling for hall management */
.hall-form {
    background-color: #f7fafc;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.05);
    max-width: 600px;
    margin: 0 auto;
}

.hall-form h2 {
    margin-bottom: 20px;
    font-size: 24px;
}

.hall-form label {
    display: block;
    margin-bottom: 10px;
    font-weight: 500;
}

.hall-form input {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #cbd5e0;
    border-radius: 4px;
    font-size: 16px;
}

.hall-form button {
    padding: 10px 20px;
    background-color: #1a202c;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
}

.hall-form button:hover {
    background-color: #4a5568;
}

/* Hall list styling */
.hall-list {
    margin-top: 40px;
}

.hall-list ul {
    list-style-type: none;
    padding: 0;
}

.hall-list li {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    background-color: #f7fafc;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.05);
}

.hall-list img {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 20px;
}

.hall-list h3 {
    margin: 0;
    font-size: 20px;
}

.hall-list p {
    margin: 5px 0;
}

.hall-list button {
    margin-left: auto;
    padding: 10px 15px;
    background-color: #1a202c;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s;
}

.hall-list button.edit {
    background-color: #2d3748;
    margin-right: 10px;
}

.hall-list button:hover {
    background-color: #4a5568;
}

/* Settings form styling */
.settings-form {
    background-color: #f7fafc;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.05);
    max-width: 600px;
    margin: 0 auto;
}

.settings-form h2 {
    margin-bottom: 20px;
    font-size: 24px;
}

.settings-form label {
    display: block;
    margin-bottom: 10px;
    font-weight: 500;
}

.settings-form input {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #cbd5e0;
    border-radius: 4px;
    font-size: 16px;
}

.settings-form button {
    padding: 10px 20px;
    background-color: #1a202c;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
}

.settings-form button:hover {
    background-color: #4a5568;
}


AdminLogin.css

/* Global styles (can be put in a separate global CSS file) */
body {
    font-family: 'Arial', sans-serif; /* Use a global font */
    background-color: #e0e0e0; /* Cement background color for the whole page */
    margin: 0;
    padding: 0;
}

/* Auth container to center the auth box */
.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh; /* Full viewport height */
    background-color: #e0e0e0; /* Cement background color */
}

/* Auth box styling */
.auth-box {
    background: white;
    padding: 2.5rem; /* Increased padding for a more spacious feel */
    border-radius: 8px; /* Slightly less rounded for a cleaner look */
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    width: 100%;
    max-width: 450px; /* Increased max-width to make the box larger */
}

/* Title styling */
.auth-title {
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
    color: #333; /* Darker text color for better readability */
}

/* Form styling */
.auth-box form {
    display: flex;
    flex-direction: column;
    gap: 1.25rem; /* Increased gap for more spacing between elements */
}

/* Label styling */
.auth-box label {
    display: flex;
    flex-direction: column;
    font-size: 0.875rem; /* Slightly smaller font size for labels */
    color: #555; /* Medium text color */
}

/* Input styling */
.auth-box input {
    padding: 0.75rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    outline: none;
}

/* Button styling */
.auth-box button {
    padding: 0.75rem;
    border: none;
    background-color: #6c757d; /* Cement color */
    color: white;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem; /* Consistent button text size */
}

.auth-box button:hover {
    background-color: #5a6268; /* Slightly darker cement color for hover effect */
}


BrowseHalls.css



/* General container styling */
.browse-halls {
    padding: 2rem;
    background-color: #f8f8f8; /* Light grey background */
    min-height: 100vh;
    font-family: 'Arial', sans-serif;
    color: #333; /* Dark grey text */
}

/* Header styling */
.browse-halls h2 {
    font-size: 2rem;
    color: #222; /* Slightly darker grey for the header */
    margin-bottom: 1.5rem;
    text-align: center;
}

/* Filters container styling */
.filters-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 2rem;
}

.filters-container input,
.filters-container select {
    padding: 0.75rem;
    font-size: 1rem;
    border: 1px solid #ddd; /* Light grey border */
    border-radius: 8px;
    width: 100%;
    max-width: 250px;
    background-color: #fff;
    color: #333; /* Dark grey text */
}

/* Hall cards container */
.hall-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
}

/* Hall card styling */
.hall-card {
    background-color: #fff; /* White background for the card */
    border: 1px solid #ddd; /* Light grey border */
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
}

.hall-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); /* Increased shadow on hover */
}

/* Hall image styling */
.hall-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

/* Hall details styling */
.hall-details {
    padding: 1rem;
    text-align: center;
}

.hall-details h3 {
    font-size: 1.5rem;
    margin-bottom: 0.75rem;
    color: #222; /* Dark grey for hall name */
}

.hall-details p {
    font-size: 1rem;
    margin: 0.5rem 0;
    color: #555; /* Medium grey for details */
}

/* Book Now button styling */
.book-now-btn {
    padding: 0.75rem;
    border: none;
    background-color: #000; /* Blue background for the button */
    color: #fff; /* White text for the button */
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s ease, color 0.3s ease;
    margin-top: 1rem;
}

.book-now-btn:hover {
    background: #4a5568; /* Darker blue on hover */
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .filters-container {
        flex-direction: column;
        align-items: flex-start;
    }

    .hall-details {
        padding: 0.75rem;
    }

    .hall-card {
        margin-bottom: 1.5rem;
    }
}


ConfirmationPage.css

 /* src/pages/ConfirmationPage.css */

.confirmation-page {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f9f9f9;
    padding: 20px;
}

.confirmation-content {
    background: white;
    border-radius: 8px;
    padding: 30px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-width: 600px;
    width: 100%;
    text-align: center;
}

.confirmation-title {
    font-size: 2em;
    color: #333;
    margin-bottom: 10px;
}

.confirmation-message {
    font-size: 1.2em;
    color: #555;
    margin-bottom: 20px;
}

.confirmation-details {
    margin-bottom: 20px;
}

.details-title {
    font-size: 1.5em;
    color: #444;
    margin-bottom: 10px;
}

.confirmation-details ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.confirmation-details li {
    font-size: 1.1em;
    color: #666;
    margin-bottom: 8px;
}

.confirmation-actions {
    margin-top: 20px;
}

.back-home-btn, .browse-halls-btn {
    display: inline-block;
    padding: 10px 20px;
    font-size: 1em;
    color: #fff;
    background-color: #007bff;
    border-radius: 5px;
    text-decoration: none;
    margin: 5px;
    transition: background-color 0.3s ease;
}

.back-home-btn:hover, .browse-halls-btn:hover {
    background-color: #0056b3;
}


Footer.css

.footer {
    padding: 1rem;
    background-color: pink;
    text-align: center;
    color: white;
    
}

Homepage.css

.homepage {
    font-family: 'Poppins', sans-serif;
    color: #333;
    background-color: #f5f5f5; 
    margin: 0;
    padding: 0;
}

.header {
    position: relative;
    height: 90vh;
    background: url('https://img.freepik.com/premium-photo/balloon-with-copy-space-illustration-generative-ai_343173-179.jpg') no-repeat center center/cover; /* Update with your desired image */
    /* background-color: #d3d3d3;  */
    color: #333; 
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    overflow: hidden;
}

.header .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* background: rgba(211, 211, 211, 0.7);  */
}

.header-content {
    z-index: 1;
    max-width: 600px;
    margin: 0 auto;
}

.header-content h1 {
    font-size: 3rem;
    margin-bottom: 20px;
    color: #333; 
}

.header-content p {
    font-size: 1.5rem;
    margin-bottom: 30px;
    color: #333; 
}

.explore-halls-button {
    background-color: #ccc; /* Cement button */
    color: #333;
    border: none;
    padding: 15px 30px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.explore-halls-button:hover {
    background-color: #bbb; /* Darker cement on hover */
}

.highlights {
    padding: 50px 20px;
    text-align: center;
}

.highlights h2 {
    margin-bottom: 30px;
    font-size: 2rem;
    color: #333; /* Dark gray text color */
}

.highlight-cards {
    display: flex;
    justify-content: center;
    gap: 20px;
    flex-wrap: wrap;
}

.highlight-card {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    padding: 20px;
    max-width: 300px;
    text-align: center;
    margin: 10px;
    border: 1px solid #ddd;
    transition: all 0.3s ease;
}

.highlight-card:hover {
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.3);
    transform: translateY(-5px);
}

.highlight-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 10px;
    border: 1px solid #ddd;
}

.highlight-card h3 {
    margin: 15px 0;
    font-size: 1.5rem;
    color: #333; /* Dark gray text color */
}

.highlight-card p {
    font-size: 1rem;
    color: #666;
}

.featured-events {
    padding: 50px 20px;
    text-align: center;
    background-color: #f5f5f5;
}

.featured-events h2 {
    margin-bottom: 30px;
    font-size: 2rem;
    color: #333; /* Dark gray text color */
}

.featured-event-card {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 20px;
    text-align: center;
    max-width: 300px;
    margin: 0 auto;
}

.featured-event-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 10px;
}

.featured-event-info {
    padding: 10px 0;
}

.featured-event-info h3 {
    margin: 10px 0;
    font-size: 1.5rem;
    color: #333; /* Dark gray text color */
}

.featured-event-info p {
    font-size: 1rem;
    color: #666;
}

.special-offers {
    padding: 50px 20px;
    text-align: center;
}

.special-offers h2 {
    margin-bottom: 30px;
    font-size: 2rem;
    color: #333; /* Dark gray text color */
}

.offers-container {
    display: flex;
    justify-content: center;
    gap: 20px;
    flex-wrap: wrap;
}

.offer-card {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 20px;
    max-width: 300px;
    text-align: center;
    margin: 10px;
}

.offer-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 10px;
}

.offer-card h3 {
    margin: 15px 0;
    font-size: 1.5rem;
    color: #333; /* Dark gray text color */
}

.offer-card p {
    font-size: 1rem;
    color: #666;
}

.footer {
    background-color: #d3d3d3; /* Cement color background */
    color: #333;
    padding: 50px 20px;
    text-align: center;
}

.footer-content {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
}

.footer-section {
    flex: 1;
    min-width: 250px;
}

.footer-section h3 {
    font-size: 1.5rem;
    margin-bottom: 20px;
    color: #333; /* Dark gray text color */
}

.footer-section p, .footer-section a {
    font-size: 1rem;
    color: #333; /* Dark gray text color */
    text-decoration: none;
}

.footer-section a:hover {
    text-decoration: underline;
}

.footer-bottom {
    margin-top: 30px;
    font-size: 0.9rem;
    color: #333; /* Dark gray text color */
}


ManageHalls.css

/* Container for managing halls */
.manage-halls {
    font-family: 'Roboto', sans-serif;
    color: #333;
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
}

/* Form container for adding/updating halls */
.hall-form {
    background-color: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 30px;
    max-width: 600px;
    margin: 0 auto;
}

/* Form heading */
.hall-form h2 {
    text-align: center;
    margin-bottom: 20px;
    font-weight: 500;
    color: #444;
}

/* General form field styling */
.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #666;
}

.form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
}

.form-group input:focus {
    border-color: #007bff;
    outline: none;
}

/* Submit button styling */
.submit-btn {
    width: 100%;
    padding: 12px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
}

.submit-btn svg {
    margin-right: 8px;
}

.submit-btn:hover {
    background-color: #0056b3;
}

/* List of halls */
.hall-list {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* List heading */
.hall-list h2 {
    text-align: center;
    margin-bottom: 20px;
    font-weight: 500;
    color: #444;
}

/* List styling */
.hall-list ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.hall-list li {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 15px;
    border-bottom: 1px solid #eee;
}

/* Remove border for last item */
.hall-list li:last-child {
    border-bottom: none;
}

/* Hall image styling */
.hall-list img {
    max-width: 120px;
    border-radius: 8px;
    margin-right: 20px;
}

/* Details section styling */
.hall-details {
    flex-grow: 1;
}

.hall-details h3 {
    margin: 0 0 10px;
    font-size: 20px;
    color: #333;
}

.hall-details p {
    margin: 5px 0;
    color: #666;
}

/* Actions container styling */
.hall-actions {
    display: flex;
    align-items: center;
    gap: 10px; /* Small gap between buttons */
}

/* Button styling */
.hall-actions button {
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 4px;
    padding: 8px 12px;
    font-size: 14px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
}

.hall-actions button.edit {
    background-color: #28a745;
}

.hall-actions button.delete {
    background-color: #dc3545;
}

.hall-actions button svg {
    margin-right: 5px;
}

.hall-actions button:hover {
    opacity: 0.8;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .hall-list li {
        flex-direction: column;
        align-items: flex-start;
    }

    .hall-list img {
        max-width: 100%;
        margin-bottom: 10px;
    }

    .hall-actions {
        width: 100%;
        justify-content: flex-end; /* Align buttons to the right */
    }
}


Navbar.css



.navbar {
    background-color: #001f3f;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 1rem 2rem;
    position: sticky;
    top: 0;
    z-index: 1000;
}

.navbar-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.navbar-logo a {
    font-size: 1.5rem;
    color: #ff851b;
    text-decoration: none;
    font-weight: bold;
}

.navbar-links {
    list-style: none;
    display: flex;
    gap: 1rem;
}

.navbar-links li a {
    color:  #ffffff;
    text-decoration: none;
    font-size: 1rem;
    transition: color 0.3s ease;
}

.navbar-links li a:hover {
    color: #ff851b;
}


PaymentPage.css

/* src/pages/PaymentPage.css */

.payment-page {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    background-color: #f9f9f9;
}

.payment-page h1 {
    font-size: 2em;
    color: #333;
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 15px;
    width: 100%;
    max-width: 600px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-group input, .form-group select {
    width: 100%;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ddd;
}

.submit-btn {
    padding: 10px 20px;
    font-size: 1.2em;
    color: white;
    background-color:pink;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.submit-btn:hover {
    background-color: #ff69b4;
}


SearchBar.css

.search-bar {
    display: flex;
    justify-content: center;
    margin: 2rem 0;
}

.search-bar input {
    padding: 0.5rem;
    border: 1px solid pink;
    border-radius: 4px;
}

.search-bar button {
    padding: 0.5rem;
    border: none;
    background-color: pink;
    color: white;
    border-radius: 4px;
    margin-left: 0.5rem;
}


SignIn.css

/* Global styles (can be put in a separate global CSS file) */
body {
    font-family: 'Arial', sans-serif;
    background-color: #e0e0e0;
    margin: 0;
    padding: 0;
}

/* Container for centering the login/signup box */
.login-signup-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e0e0;
}

/* Box styling for login/signup */
.login-signup {
    background: white;
    padding: 2.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    width: 100%;
    max-width: 380px; /* Reduced max-width for a slightly smaller box */
}

/* Title styling */
.login-signup h1 {
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
    color: #333;
    text-align: center; /* Center the title */
}

/* Form styling */
.login-signup form {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
}

/* Form group styling */
.form-group {
    display: flex;
    flex-direction: column;
}

/* Label styling */
.form-group label {
    font-size: 0.875rem;
    color: #555;
    margin-bottom: 0.5rem; /* Add some space between label and input */
}

/* Input styling */
.form-group input {
    padding: 0.75rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    outline: none;
}

/* Button styling */
.submit-btn {
    padding: 0.75rem;
    border: none;
    background-color: #6c757d;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
}

.submit-btn:hover {
    background-color: #5a6268;
}

/* Switch button styling */
.switch-button {
    margin-top: 1rem; /* Space above the switch button */
    padding: 0.75rem;
    border: none;
    background-color: transparent; /* Transparent background */
    color: #6c757d;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    text-align: center; /* Center the text inside the button */
}

.switch-button:hover {
    color: #5a6268; /* Darker color on hover */
}

/* Error message styling */
.message {
    margin-top: 1rem;
    color: #d9534f; /* Bootstrap danger color */
    text-align: center; /* Center the error message */
}


SignUp.css

body {
    margin: 0;
    font-family: Arial, sans-serif;
  }
  
  .signup-container {
    max-width: 400px;
    margin: 3rem auto;
    padding: 2rem;
    background-color: rgba(255, 255, 255, 0.9); /* Semi-transparent background */
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    position: relative;
    z-index: 1;
  }
  
  .signup-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('https://cdn0.hitched.co.uk/vendor/0187/3_2/640/jpg/1-240_4_200187-166757669059920.jpeg');
    background-size: cover;
    background-position: center;
    z-index: -1;
  }
  
  .signup-container h2 {
    margin-bottom: 1rem;
    text-align: center;
  }
  
  .signup-container form {
    display: flex;
    flex-direction: column;
  }
  
  .signup-container input {
    margin-bottom: 1rem;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .signup-container button {
    padding: 0.5rem;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .signup-container button:hover {
    background-color:#0056b3;
  }
  
App.css

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


App.js

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { Provider } from 'react-redux';
import axios from 'axios';
import store from './redux/store';
import Navbar from './components/Navbar';
import Footer from './components/Footer';
import HomePage from './pages/HomePage';
import AdminLogin from './pages/AdminLogin';
import AdminDashboard from './pages/AdminDashboard';
import BrowseHalls from './pages/BrowseHalls';
import ManageHalls from './pages/ManageHalls';
import SignIn from './pages/SignIn';
import SignUp from './pages/SignUp';
import PaymentPage from './pages/PaymentPage';
import ConfirmationPage from './pages/ConfirmationPage';

import './App.css';

const App = () => {
    const [halls, setHalls] = useState([]);

    const fetchHalls = async () => {
        try {
            const response = await axios.get('http://localhost:3001/halls');
            setHalls(response.data);
        } catch (error) {
            console.error("Error fetching halls:", error);
        }
    };

    useEffect(() => {
        fetchHalls(); // Fetch halls on component mount
    }, []);

    return (
        <Provider store={store}>
            <Router>
                <Navbar />
                <Routes>
                    <Route path="/" element={<HomePage />} />
                    <Route path="/admin" element={<AdminLogin />} />
                    <Route 
                        path="/admin-dashboard" 
                        element={<AdminDashboard halls={halls} fetchHalls={fetchHalls} />} 
                    />
                    <Route 
                        path="/manage-halls" 
                        element={<ManageHalls halls={halls} fetchHalls={fetchHalls} />} 
                    />
                    <Route 
                        path="/browse-halls" 
                        element={<BrowseHalls halls={halls} />} 
                    />
                    <Route path="/signin" element={<SignIn />} />
                    <Route path="/signup" element={<SignUp />} />
                    <Route path="/payment" element={<PaymentPage />} />
                    <Route path="/confirmation" element={<ConfirmationPage />} />
                </Routes>
                <Footer />
            </Router>
        </Provider>
    );
};

export default App;



index.css


/* index.css */
@import "~slick-carousel/slick/slick.css";
@import "~slick-carousel/slick/slick-theme.css";

/* Existing styles */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


index.js

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();



db.json

{
"halls":[],
"users":[],
"bookings":[],
"admin":[]
}


